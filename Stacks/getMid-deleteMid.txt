

import java.util.Stack;

class Test
{
	//using Stack class for stack implementation
	static Stack<Integer> st = new Stack<>();
	static int min=999;
	static int x;
	static int mid=-1;

	// Below is a recursive function that gets min element of a stack!

	static int getMin(){
	  
	    if(st.size()>0)
	    {
	       
	        if(st.peek()<min)
	        {
	            min=st.peek();
	           
	        }
	         int x=st.pop(); //for storing and returning the then value of x during recursive call, use datatype and variable together. 
	          getMin();
	      
	        st.push(x);
	        }
	        return min;
	        
	        
	    }
	    //can design my own constraints to incase of odd or even size value
	    
	    static int findMid(int mid_index)
	    {

	     if(st.size()>=mid_index+1)
	     {
	         int x=st.pop();
	         mid=x;
	         findMid(mid_index);
	         st.push(x);
	     }
	     return mid;
	    }
	    
	    static void deleteMid(int mid_index)
	    {
	        if(st.size()>mid_index+1)
	        {
	            int x=st.pop();
	            mid=x;
	            deleteMid(mid_index);
	            st.push(x);
	        }
	        else{
	            st.pop();
	        }
	        return;
	        }
	    
	

	
	// Driver method
	public static void main(String[] args) 
	{
	    int minimum;
		int mid_index;
		int mid_ele;
		//push elements into the stack
		st.push(10);
		st.push(4);
		st.push(31);
		st.push(2);
		
		System.out.println("Original Stack");
		
		System.out.println(st);
		
		//function to reverse the stack
		 mid_index=st.size()/2;
		 System.out.println("Mid index is"+mid_index);
		mid_ele=findMid(mid_index);
		
		System.out.println("Mid from Stack "+ mid);
	    deleteMid(mid_index);
	    System.out.println("After deleting mid \n"+st);
	
    st.push(12);
    st.push(33);
    st.push(31);
    	System.out.println(st);
 mid_index=st.size()/2;
		 System.out.println("Mid index is"+mid_index);
		mid_ele=findMid(mid_index);
		
		System.out.println("Mid from Stack "+ mid);
	
	 deleteMid(mid_index);
	    System.out.println("After deleting mid \n"+st);
		
	
	}
}