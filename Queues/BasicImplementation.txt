class Queue{
    int array[];
    int front;
    int rear;
    int capacity;
    int size;
    
    public Queue(int capacity)
    {
        this.capacity=capacity; 
        array=new int[capacity];
        front=0;
        rear=0;
        size=0;
    }
    
    //to avoid size as a variable full condition : 
    //front==0 and rear==capacity -1 
    
    //if front is ahead of rear (wraps around):
    //front-rear=1 (front rigth after rear)
    public boolean isFull()
    {
        if(capacity==size)
        return true;
        else
        return false;
    }
    
    //to avoid size as a variable full condition :
    //front==0 and rear==0 
    public boolean isEmpty()
    {
        if (size==0)
        return true;
        else
        return false;
    }
    
    public void enqueue(int ele)
    {
        if(!isFull()){
            rear=(rear%capacity);
            array[rear]=ele;
            rear++;
            size++;
     System.out.println("Enqueued "+ele);
        }
            else
            System.out.println("Cannot enqueue");
        }
        
    
    public int dequeue()
    {
        if(!isEmpty())
        {
            int value= array[front];
            
            front=(front+1)%(capacity);
            size--;
            return value;
        }
        else{
        System.out.println("Cannot dequeue");
        return -1;
        }
    }

    public void front()
    {
        if(isEmpty())
        {
            System.out.println("Front -irrelevant");
        }
        System.out.println("Front is"+front);
        
    }
    
    public void rear()
    {
       
       if(isFull())
       {
           System.out.println("Rear - irrelevant"); //out of sheer laziness. Rear and front could always be pointing to right places. Rear should be incremented first and %'d later for it to not point at '5' which is beyond capacity! (as per our example)
       }
            System.out.println("Rear is"+rear);
        }
    
    
    public void print()
    {
        for(int i=0;i<capacity;i++)
        System.out.println(array[i]);
        
    }
}





class Test{
    
    public static void main(String args[])
    {
        Queue q = new Queue(5);
        q.enqueue(10);
        q.enqueue(20);
        q.enqueue(30);
        q.enqueue(40);
        q.enqueue(50);
        q.enqueue(60);
        q.dequeue();
        q.dequeue();
        q.enqueue(70);
        q.front();
        q.rear();
        q.print();
    }
}